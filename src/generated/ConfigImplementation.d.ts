/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ConfigImplementationInterface extends ethers.utils.Interface {
  functions: {
    "gatewayAddress()": FunctionFragment;
    "getVersion()": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "marketplaceAddress()": FunctionFragment;
    "marketplaceFee()": FunctionFragment;
    "marketplaceFeeDecimals()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateGatewayAddress(address)": FunctionFragment;
    "updateMarketplaceAddress(address)": FunctionFragment;
    "updateMarketplaceFee(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "gatewayAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceFeeDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGatewayAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketplaceAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketplaceFee",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "gatewayAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceFeeDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGatewayAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketplaceFee",
    data: BytesLike
  ): Result;

  events: {
    "GatewayAddressUpdated(address,address)": EventFragment;
    "MarketplaceAddressUpdated(address,address)": EventFragment;
    "MarketplaceFeeUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GatewayAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketplaceAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketplaceFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type GatewayAddressUpdatedEvent = TypedEvent<
  [string, string] & { oldGatewayAddress: string; newGatewayAddress: string }
>;

export type MarketplaceAddressUpdatedEvent = TypedEvent<
  [string, string] & {
    oldMarketplaceAddress: string;
    newMarketplaceAddress: string;
  }
>;

export type MarketplaceFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    oldMarketplaceFee: BigNumber;
    oldMarketplaceFeeDecimals: BigNumber;
    newMarketplaceFee: BigNumber;
    newMarketplaceFeeDecimals: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class ConfigImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConfigImplementationInterface;

  functions: {
    gatewayAddress(overrides?: CallOverrides): Promise<[string]>;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _gatewayAddress: string,
      _marketplaceAddress: string,
      _marketplaceFee: BigNumberish,
      _marketplaceFeeDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketplaceAddress(overrides?: CallOverrides): Promise<[string]>;

    marketplaceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketplaceFeeDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGatewayAddress(
      _newGatewayAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketplaceAddress(
      _newMarketplaceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketplaceFee(
      _newMarketplaceFee: BigNumberish,
      _newMarketplaceFeeDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  gatewayAddress(overrides?: CallOverrides): Promise<string>;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _gatewayAddress: string,
    _marketplaceAddress: string,
    _marketplaceFee: BigNumberish,
    _marketplaceFeeDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketplaceAddress(overrides?: CallOverrides): Promise<string>;

  marketplaceFee(overrides?: CallOverrides): Promise<BigNumber>;

  marketplaceFeeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGatewayAddress(
    _newGatewayAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketplaceAddress(
    _newMarketplaceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketplaceFee(
    _newMarketplaceFee: BigNumberish,
    _newMarketplaceFeeDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gatewayAddress(overrides?: CallOverrides): Promise<string>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _gatewayAddress: string,
      _marketplaceAddress: string,
      _marketplaceFee: BigNumberish,
      _marketplaceFeeDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    marketplaceAddress(overrides?: CallOverrides): Promise<string>;

    marketplaceFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketplaceFeeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGatewayAddress(
      _newGatewayAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketplaceAddress(
      _newMarketplaceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketplaceFee(
      _newMarketplaceFee: BigNumberish,
      _newMarketplaceFeeDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GatewayAddressUpdated(address,address)"(
      oldGatewayAddress?: null,
      newGatewayAddress?: null
    ): TypedEventFilter<
      [string, string],
      { oldGatewayAddress: string; newGatewayAddress: string }
    >;

    GatewayAddressUpdated(
      oldGatewayAddress?: null,
      newGatewayAddress?: null
    ): TypedEventFilter<
      [string, string],
      { oldGatewayAddress: string; newGatewayAddress: string }
    >;

    "MarketplaceAddressUpdated(address,address)"(
      oldMarketplaceAddress?: null,
      newMarketplaceAddress?: null
    ): TypedEventFilter<
      [string, string],
      { oldMarketplaceAddress: string; newMarketplaceAddress: string }
    >;

    MarketplaceAddressUpdated(
      oldMarketplaceAddress?: null,
      newMarketplaceAddress?: null
    ): TypedEventFilter<
      [string, string],
      { oldMarketplaceAddress: string; newMarketplaceAddress: string }
    >;

    "MarketplaceFeeUpdated(uint256,uint256,uint256,uint256)"(
      oldMarketplaceFee?: null,
      oldMarketplaceFeeDecimals?: null,
      newMarketplaceFee?: null,
      newMarketplaceFeeDecimals?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldMarketplaceFee: BigNumber;
        oldMarketplaceFeeDecimals: BigNumber;
        newMarketplaceFee: BigNumber;
        newMarketplaceFeeDecimals: BigNumber;
      }
    >;

    MarketplaceFeeUpdated(
      oldMarketplaceFee?: null,
      oldMarketplaceFeeDecimals?: null,
      newMarketplaceFee?: null,
      newMarketplaceFeeDecimals?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldMarketplaceFee: BigNumber;
        oldMarketplaceFeeDecimals: BigNumber;
        newMarketplaceFee: BigNumber;
        newMarketplaceFeeDecimals: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    gatewayAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _gatewayAddress: string,
      _marketplaceAddress: string,
      _marketplaceFee: BigNumberish,
      _marketplaceFeeDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketplaceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    marketplaceFee(overrides?: CallOverrides): Promise<BigNumber>;

    marketplaceFeeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGatewayAddress(
      _newGatewayAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketplaceAddress(
      _newMarketplaceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketplaceFee(
      _newMarketplaceFee: BigNumberish,
      _newMarketplaceFeeDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gatewayAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _gatewayAddress: string,
      _marketplaceAddress: string,
      _marketplaceFee: BigNumberish,
      _marketplaceFeeDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketplaceAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketplaceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketplaceFeeDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGatewayAddress(
      _newGatewayAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketplaceAddress(
      _newMarketplaceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketplaceFee(
      _newMarketplaceFee: BigNumberish,
      _newMarketplaceFeeDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
