/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VestingImplementationInterface extends ethers.utils.Interface {
  functions: {
    "addBeneficiaries(address[],uint256[],uint256[])": FunctionFragment;
    "beneficiaries(address)": FunctionFragment;
    "beneficiaryListAt(uint256)": FunctionFragment;
    "beneficiaryListLength()": FunctionFragment;
    "claim()": FunctionFragment;
    "endBlock()": FunctionFragment;
    "getClaimableAmount(address)": FunctionFragment;
    "initialize(address,uint256,uint256,address[],uint256[],uint256[])": FunctionFragment;
    "lockBeneficiaries(address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startBlock()": FunctionFragment;
    "token()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferERC20(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockBeneficiaries(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBeneficiaries",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryListAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryListLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockBeneficiaries",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockBeneficiaries",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryListAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockBeneficiaries",
    data: BytesLike
  ): Result;

  events: {
    "BeneficiaryAdded(address,uint256,uint256)": EventFragment;
    "BeneficiaryClaimed(address,uint256)": EventFragment;
    "BeneficiaryLocked(address)": EventFragment;
    "BeneficiaryUnlocked(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeneficiaryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type BeneficiaryAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    beneficiary: string;
    vestingAmount: BigNumber;
    genesisAmount: BigNumber;
  }
>;

export type BeneficiaryClaimedEvent = TypedEvent<
  [string, BigNumber] & { beneficiary: string; amount: BigNumber }
>;

export type BeneficiaryLockedEvent = TypedEvent<
  [string] & { beneficiary: string }
>;

export type BeneficiaryUnlockedEvent = TypedEvent<
  [string] & { beneficiary: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { token: string; to: string; amount: BigNumber }
>;

export class VestingImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VestingImplementationInterface;

  functions: {
    addBeneficiaries(
      _accounts: string[],
      _vestingAmount: BigNumberish[],
      _genesisAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beneficiaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        genesisAmount: BigNumber;
        vestingAmount: BigNumber;
        claimedAmount: BigNumber;
        state: number;
      }
    >;

    beneficiaryListAt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beneficiaryListLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _token: string,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _accounts: string[],
      _vestingAmounts: BigNumberish[],
      _genesisAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockBeneficiaries(
      _beneficiaryList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferERC20(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockBeneficiaries(
      _beneficiaryList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBeneficiaries(
    _accounts: string[],
    _vestingAmount: BigNumberish[],
    _genesisAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beneficiaries(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      genesisAmount: BigNumber;
      vestingAmount: BigNumber;
      claimedAmount: BigNumber;
      state: number;
    }
  >;

  beneficiaryListAt(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  beneficiaryListLength(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimableAmount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _token: string,
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    _accounts: string[],
    _vestingAmounts: BigNumberish[],
    _genesisAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockBeneficiaries(
    _beneficiaryList: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  transfer(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferERC20(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockBeneficiaries(
    _beneficiaryList: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBeneficiaries(
      _accounts: string[],
      _vestingAmount: BigNumberish[],
      _genesisAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    beneficiaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        genesisAmount: BigNumber;
        vestingAmount: BigNumber;
        claimedAmount: BigNumber;
        state: number;
      }
    >;

    beneficiaryListAt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    beneficiaryListLength(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _token: string,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _accounts: string[],
      _vestingAmounts: BigNumberish[],
      _genesisAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    lockBeneficiaries(
      _beneficiaryList: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferERC20(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockBeneficiaries(
      _beneficiaryList: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BeneficiaryAdded(address,uint256,uint256)"(
      beneficiary?: string | null,
      vestingAmount?: null,
      genesisAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        beneficiary: string;
        vestingAmount: BigNumber;
        genesisAmount: BigNumber;
      }
    >;

    BeneficiaryAdded(
      beneficiary?: string | null,
      vestingAmount?: null,
      genesisAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        beneficiary: string;
        vestingAmount: BigNumber;
        genesisAmount: BigNumber;
      }
    >;

    "BeneficiaryClaimed(address,uint256)"(
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    BeneficiaryClaimed(
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    "BeneficiaryLocked(address)"(
      beneficiary?: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    BeneficiaryLocked(
      beneficiary?: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    "BeneficiaryUnlocked(address)"(
      beneficiary?: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    BeneficiaryUnlocked(
      beneficiary?: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Transfer(address,address,uint256)"(
      token?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    Transfer(
      token?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addBeneficiaries(
      _accounts: string[],
      _vestingAmount: BigNumberish[],
      _genesisAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beneficiaries(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    beneficiaryListAt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryListLength(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _token: string,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _accounts: string[],
      _vestingAmounts: BigNumberish[],
      _genesisAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockBeneficiaries(
      _beneficiaryList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferERC20(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockBeneficiaries(
      _beneficiaryList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBeneficiaries(
      _accounts: string[],
      _vestingAmount: BigNumberish[],
      _genesisAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beneficiaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryListAt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryListLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _accounts: string[],
      _vestingAmounts: BigNumberish[],
      _genesisAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockBeneficiaries(
      _beneficiaryList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferERC20(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockBeneficiaries(
      _beneficiaryList: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
