/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IHasVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasVotes__factory>;
    getContractFactory(
      name: "INonTransferrableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonTransferrableToken__factory>;
    getContractFactory(
      name: "IVotingDelegates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotingDelegates__factory>;
    getContractFactory(
      name: "TransferrableVotingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferrableVotingToken__factory>;
    getContractFactory(
      name: "VotingPower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingPower__factory>;
    getContractFactory(
      name: "VotingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingToken__factory>;
    getContractFactory(
      name: "Bep20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bep20Token__factory>;
    getContractFactory(
      name: "TestCid",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCid__factory>;
    getContractFactory(
      name: "UpgradedMultisaleNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradedMultisaleNFT__factory>;
    getContractFactory(
      name: "UUPSUpgradedNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradedNFT__factory>;
    getContractFactory(
      name: "INVMGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INVMGovernance__factory>;
    getContractFactory(
      name: "INVMTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INVMTimelock__factory>;
    getContractFactory(
      name: "IVotingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotingToken__factory>;
    getContractFactory(
      name: "INVMGovernanceEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INVMGovernanceEvents__factory>;
    getContractFactory(
      name: "NVMGovernanceStorageV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NVMGovernanceStorageV1__factory>;
    getContractFactory(
      name: "NVMGovernanceImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NVMGovernanceImplementation__factory>;
    getContractFactory(
      name: "NVMGovernanceProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NVMGovernanceProxy__factory>;
    getContractFactory(
      name: "NVMProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NVMProxyAdmin__factory>;
    getContractFactory(
      name: "NVMTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NVMTimelock__factory>;
    getContractFactory(
      name: "TokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenMock__factory>;
    getContractFactory(
      name: "VestingImplementationV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestingImplementationV2__factory>;
    getContractFactory(
      name: "CNYEgg",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CNYEgg__factory>;
    getContractFactory(
      name: "NormalSellNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NormalSellNFT__factory>;
    getContractFactory(
      name: "ConfigImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigImplementation__factory>;
    getContractFactory(
      name: "ConfigProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigProxy__factory>;
    getContractFactory(
      name: "IConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConfig__factory>;
    getContractFactory(
      name: "IMintableVotingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintableVotingToken__factory>;
    getContractFactory(
      name: "NVMMintableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NVMMintableToken__factory>;
    getContractFactory(
      name: "NVMToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NVMToken__factory>;
    getContractFactory(
      name: "ITreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasury__factory>;
    getContractFactory(
      name: "TreasuryImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TreasuryImplementation__factory>;
    getContractFactory(
      name: "TreasuryProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TreasuryProxy__factory>;
    getContractFactory(
      name: "AdminManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminManager__factory>;
    getContractFactory(
      name: "MarketPlace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketPlace__factory>;
    getContractFactory(
      name: "MultisaleStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultisaleStorage__factory>;
    getContractFactory(
      name: "MultiSaleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSaleV2__factory>;
    getContractFactory(
      name: "StorageV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StorageV2__factory>;
    getContractFactory(
      name: "UUPSMultiSaleNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSMultiSaleNFT__factory>;
    getContractFactory(
      name: "UUPSNormalSellNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSNormalSellNFT__factory>;
    getContractFactory(
      name: "IVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVesting__factory>;
    getContractFactory(
      name: "VestingImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestingImplementation__factory>;
    getContractFactory(
      name: "VestingProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestingProxy__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IHasVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHasVotes>;
    getContractAt(
      name: "INonTransferrableToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INonTransferrableToken>;
    getContractAt(
      name: "IVotingDelegates",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotingDelegates>;
    getContractAt(
      name: "TransferrableVotingToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferrableVotingToken>;
    getContractAt(
      name: "VotingPower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingPower>;
    getContractAt(
      name: "VotingToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingToken>;
    getContractAt(
      name: "Bep20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bep20Token>;
    getContractAt(
      name: "TestCid",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCid>;
    getContractAt(
      name: "UpgradedMultisaleNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradedMultisaleNFT>;
    getContractAt(
      name: "UUPSUpgradedNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradedNFT>;
    getContractAt(
      name: "INVMGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INVMGovernance>;
    getContractAt(
      name: "INVMTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INVMTimelock>;
    getContractAt(
      name: "IVotingToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotingToken>;
    getContractAt(
      name: "INVMGovernanceEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INVMGovernanceEvents>;
    getContractAt(
      name: "NVMGovernanceStorageV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NVMGovernanceStorageV1>;
    getContractAt(
      name: "NVMGovernanceImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NVMGovernanceImplementation>;
    getContractAt(
      name: "NVMGovernanceProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NVMGovernanceProxy>;
    getContractAt(
      name: "NVMProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NVMProxyAdmin>;
    getContractAt(
      name: "NVMTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NVMTimelock>;
    getContractAt(
      name: "TokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenMock>;
    getContractAt(
      name: "VestingImplementationV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestingImplementationV2>;
    getContractAt(
      name: "CNYEgg",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CNYEgg>;
    getContractAt(
      name: "NormalSellNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NormalSellNFT>;
    getContractAt(
      name: "ConfigImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfigImplementation>;
    getContractAt(
      name: "ConfigProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfigProxy>;
    getContractAt(
      name: "IConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConfig>;
    getContractAt(
      name: "IMintableVotingToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMintableVotingToken>;
    getContractAt(
      name: "NVMMintableToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NVMMintableToken>;
    getContractAt(
      name: "NVMToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NVMToken>;
    getContractAt(
      name: "ITreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreasury>;
    getContractAt(
      name: "TreasuryImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TreasuryImplementation>;
    getContractAt(
      name: "TreasuryProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TreasuryProxy>;
    getContractAt(
      name: "AdminManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminManager>;
    getContractAt(
      name: "MarketPlace",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketPlace>;
    getContractAt(
      name: "MultisaleStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultisaleStorage>;
    getContractAt(
      name: "MultiSaleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSaleV2>;
    getContractAt(
      name: "StorageV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StorageV2>;
    getContractAt(
      name: "UUPSMultiSaleNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSMultiSaleNFT>;
    getContractAt(
      name: "UUPSNormalSellNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSNormalSellNFT>;
    getContractAt(
      name: "IVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVesting>;
    getContractAt(
      name: "VestingImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestingImplementation>;
    getContractAt(
      name: "VestingProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestingProxy>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
